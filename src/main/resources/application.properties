# Spring boot uygulama adını gösterir.
# Dağıtık sistemlerde mikroservislerinin birbirini tanıması ve haberleşmesi için önemlidir
# Eureka Serverdaki rolü: Bu projeyi çalıştırdığımda yönetim konsolunda görünecek isimdir
spring.application.name=eureka_server

# Port Normalde localhost:8080 portunda çalışır ancak biz bu proje için 8761 portunu kullanıyoruz
# http://localhost:8761 bu port üzerinden Eureka server kullanıcı arayüzüne ulaşırız.
server.port= 8761

# http://localhost:8761/eureka

# server.servlet.context-path=/eureka

# Bir uygulamanı Eureka Server'a kendini kayıt ettirip ettirmeyeceğini gösterir.
# Bir mikroservice uygulamasında Eureka Client olarak çalıştırdığımızda kendisi Eureka Server'a kaydettirir.
# Ancak burada false olarak ayarlandığında, Eureka server kendi kendini kayıt ettirmesin. Yani bir Eureka Server'ın kendisini veri tabanında(registry) kaydetmesini engeller
# çünkü sadece diğer mikroservislerin kayıt etmesi gerekir.
eureka.client.register-with-eureka=false

# Eureka Client'ın Eureka Server'dan servis kayıtlarını(registry) alıp almayacağını belirler.
# false olarak ayarlandığında Eureka server kendisinden kayıtlı servisleri almaz. Yani Eureka server kendi veri tabanında bunu güncellemez.
# Dikkat Eureka Serverda genelde false yaparız. Çünkü kendisinin diğer sunuculardan veri geçmesine gerek yoktur.
eureka.client.fetch-registry=false


# Eureka Server'ın hata durumlarında kendisini korumasına yardımcı olacak güvenlik önlemidir.
# Bu mod etkinleştirildiğinde  Eureka server gelen ve giden istekleri sınırlayarak veri kayvını önler.
# false yapıldığında: Gelişmiş hata ayıklama ve test durumları için gerekli olacaktır.
eureka.server.enable-self-preservation=false


# Günlük seviyesini artırarak hata ayıklama için daha fazla bilgi alabilirsiniz
logging.level.org.springframework.cloud=DEBUG
