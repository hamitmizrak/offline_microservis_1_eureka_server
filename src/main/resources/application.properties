# Spring boot uygulama ad?n? gösterir.
# Da??t?k sistemlerde mikroservislerinin birbirini tan?mas? ve haberle?mesi için önemlidir
# Eureka Serverdaki rolü: Bu projeyi çal??t?rd???mda yönetim konsolunda görünecek isimdir
spring.application.name=eureka_server

# Port Normalde localhost:8080 portunda çal???r ancak biz bu proje için 8761 portunu kullan?yoruz
# http://localhost:8761 bu port üzerinden Eureka server kullan?c? arayüzüne ula??r?z.
server.port= 8761

# Bir uygulaman? Eureka Server'a kendini kay?t ettirip ettirmeyece?ini gösterir.
# Bir mikroservice uygulamas?nda Eureka Client olarak çal??t?rd???m?zda kendisi Eureka Server'a kaydettirir.
# Ancak burada false olarak ayarland???nda, Eureka server kendi kendini kay?t ettirmesin. Yani bir Eureka Server'?n kendisini veri taban?nda(registry) kaydetmesini engeller
# çünkü sadece di?er mikroservislerin kay?t etmesi gerekir.
eureka.client.register-with-eureka=false

# Eureka Client'?n Eureka Server'dan servis kay?tlar?n?(registry) al?p almayaca??n? belirler.
# false olarak ayarland???nda Eureka server kendisinden kay?tl? servisleri almaz. Yani Eureka server kendi veri taban?nda bunu güncellemez.
# Dikkat Eureka Serverda genelde false yapar?z. Çünkü kendisinin di?er sunuculardan veri geçmesine gerek yoktur.
eureka.client.fetch-registry=false

# Eureka Server'?n hata durumlar?nda kendisini korumas?na yard?mc? olacak güvenlik önlemidir.
# Bu mod etkinle?tirildi?inde  Eureka server gelen ve giden istekleri s?n?rlayarak veri kayv?n? önler.
# false yap?ld???nda: Geli?mi? hata ay?klama ve test durumlar? için gerekli olacakt?r.
eureka.server.enable-self-preservation=false
